# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv
hours = int(argv[1])
h_rate = int(argv[2])
race = int(argv[3])
res = hours*h_rate+race
print(f'Заработная плата: {res} руб.')
# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
li1 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
li2 = [li1[i] for i in range(1, len(li1)-1) if li1[i]>li1[i-1]]
print(li2)

#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#Подсказка: используйте функцию range() и генератор.

li3 = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
print(li3)

#4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]
li4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
li5 = [i for i in li4 if li4.count(i) == 1]
print(li5)

#5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().
from functools import reduce
def multip(a, b):
    return a * b
li6 = [i for i in range(100, 1001, 2)]
print(li6)
print(reduce(multip, li6))

#6. Реализовать два небольших скрипта:
#итератор, генерирующий целые числа, начиная с указанного;
#итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
from itertools import count, cycle
for i in count(5):
    print(i)
    if i > 298:
        break

li7 = "SUMMER IS COMING"
n = 0
for el in cycle(li7):
    print(el)
    n += 1
    if n == 45:
        break

#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
from random import randint
from math import factorial
rand_num = randint(1, 100)
print(f'Будем выводить факториал от 0 до {rand_num}: ')
def fact():
    li8 = [factorial(i) for i in range(rand_num+1)]
    for el in li8:
        yield el

n = fact()
for el in n:
    print(el)



